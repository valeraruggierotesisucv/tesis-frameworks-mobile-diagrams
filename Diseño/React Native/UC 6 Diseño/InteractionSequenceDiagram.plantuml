@startuml
skinparam style strictuml
skinparam defaultFontSize 11
skinparam stereotypePosition top

actor "Authenticated\nUser" as AuthenticatedUser

boundary "AddEventView" as AddEventView << TSX >>

control "useAudioRecorder" as useAudioRecorder << Custom Hooks >>
control "useImagePicker" as useImagePicker << Custom Hooks >>
control "ImagePicker" as ImagePicker << Component >>
control "useMusicPicker" as useMusicPicker << Custom Hooks >>
control "Audio" as Audio << Component >>
control "useCurrentLocation" as useCurrentLocation << Custom Hooks >>
control "Location" as expoLocationcontrol << Component >>
control "SupabaseClient" as SupabaseClient
control "DocumentPicker" as DocumentPicker << Component >>

control "AddEventController" as AddEventController << TS >>
control "LocationController" as LocationController << TS >>
control "FileController" as FileController << TS >>

entity "EventModel" as EventModel << TS >>
entity "LocationModel" as LocationModel << TS >>

participant "Express API" as API << REST >>
participant "Prisma Client" as prisma << ORM >>

database supabase
database postgresql

activate AddEventView


alt Take Picture
    AuthenticatedUser -> AddEventView : openCamera()
    AddEventView -> useImagePicker : openCamera()
    activate useImagePicker
    useImagePicker -> ImagePicker : launchCameraAsync()
    activate ImagePicker
    ImagePicker -> useImagePicker : result.assets[0].uri
    deactivate ImagePicker
    useImagePicker -> AddEventView : imageUri
    deactivate useImagePicker
else Pick Image
    AuthenticatedUser -> AddEventView : openGallery()
    AddEventView -> useImagePicker : openGallery()
    activate useImagePicker
    useImagePicker -> ImagePicker : launchImageLibraryAsync()
    activate ImagePicker
    ImagePicker -> useImagePicker : result.assets[0].uri
    deactivate ImagePicker
    useImagePicker -> AddEventView : imageUri
    deactivate useImagePicker
end

AuthenticatedUser -> AddEventView : setTitle()
AuthenticatedUser -> AddEventView : setDescription()
AuthenticatedUser -> AddEventView : setDate()
AuthenticatedUser -> AddEventView : setStartsAt()
AuthenticatedUser -> AddEventView : setEndsAt()
AuthenticatedUser -> AddEventView : setCategory()

alt Pick Music File
    AuthenticatedUser -> AddEventView : pickMusicFile()
    AddEventView -> useMusicPicker : pickMusicFile()
    activate useMusicPicker
    useMusicPicker -> DocumentPicker : getDocumentAsync()
    activate DocumentPicker
    DocumentPicker -> useMusicPicker : result.assets[0].uri
    deactivate DocumentPicker
    useMusicPicker -> AddEventView : musicFileUri
    deactivate useMusicPicker
else Record Audio
    AuthenticatedUser -> AddEventView : startRecording()
    AddEventView -> useAudioRecorder : recordAudio()
    activate useAudioRecorder
    useAudioRecorder -> Audio : Recording.createAsync()
    activate Audio
    Audio -> useAudioRecorder : recording
    deactivate Audio
    AuthenticatedUser -> AddEventView : stopRecording()
    AddEventView -> useAudioRecorder : stopRecording()
    useAudioRecorder -> AddEventView : audioFileUri
    deactivate useAudioRecorder
end

AuthenticatedUser -> AddEventView : handleCurrentLocation()
AddEventView -> useCurrentLocation : getCurrentLocation()
activate useCurrentLocation
useCurrentLocation -> expoLocationcontrol : getCurrentPositionAsync()
activate expoLocationcontrol
expoLocationcontrol -> useCurrentLocation : currentLocation
deactivate expoLocationcontrol
useCurrentLocation -> AddEventView : location
deactivate useCurrentLocation

AuthenticatedUser -> AddEventView : handleAddEvent()

AddEventView -> FileController : uploadFile(imageUri, FileType.IMAGE)
activate FileController
FileController -> SupabaseClient : storage.from(EventImages).upload(imageUri)
activate SupabaseClient
SupabaseClient -> supabase : storage.from(EventImages).getPublicUrl(imageUri)
activate supabase
supabase -> SupabaseClient : publicImageUrl
deactivate supabase
SupabaseClient -> FileController : publicImageUrl
deactivate SupabaseClient
FileController -> AddEventView : imageUrl
deactivate FileController

AddEventView -> FileController : uploadFile(musicFileUri, FileType.MUSIC)
activate FileController
FileController -> SupabaseClient : storage.from(EventMusic).upload(musicFileUri)
activate SupabaseClient
SupabaseClient -> supabase : storage.from(EventMusic).getPublicUrl(musicFileUri)
activate supabase
supabase -> SupabaseClient : publicMusicUrl
deactivate supabase
SupabaseClient -> FileController : publicMusicUrl
deactivate SupabaseClient
FileController -> AddEventView : musicUrl
deactivate FileController


' Location 
AddEventView -> LocationController : addLocation(location)
activate LocationController
LocationController -> LocationModel : createLocation(location)
activate LocationModel

LocationModel -> API : POST /api/locations
activate API
API -> prisma : location.create()
activate prisma
prisma -> postgresql : INSERT INTO locations
activate postgresql
postgresql -> prisma : locationId
deactivate postgresql
prisma -> API : location
deactivate prisma
API -> LocationModel : {data: location, success: true}
deactivate API

LocationModel -> LocationController : locationId
deactivate LocationModel
LocationController -> AddEventView : locationId
deactivate LocationController


' Event
AddEventView -> AddEventController : postEvent(event)
activate AddEventController

AddEventController -> EventModel : createEvent(event)
activate EventModel

EventModel -> API : POST /api/events
activate API
API -> prisma : event.create()
activate prisma
prisma -> postgresql : INSERT INTO events
activate postgresql

alt Successful case
    postgresql -> prisma : event

    prisma -> API : event

    API -> EventModel : {data: event, success: true}

    EventModel -> AddEventController : event

    AddEventController -> AddEventView : event

    AddEventView -> AuthenticatedUser : Show success message
else Failed case
    postgresql -> prisma : error
    deactivate postgresql
    prisma -> API : error
    deactivate prisma
    API -> EventModel : status(500) {error: "FAILED to create event"}
    deactivate API
    EventModel -> AddEventController : error
    deactivate EventModel
    AddEventController -> AddEventView : error
    deactivate AddEventController
    AddEventView -> AuthenticatedUser : Show error message
end
deactivate AddEventView

@enduml







