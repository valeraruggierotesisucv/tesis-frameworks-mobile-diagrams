@startuml InteractionSequenceDiagramMinified
skinparam style strictuml
skinparam defaultFontSize 11
skinparam stereotypePosition top

actor "Authenticated\nUser" as AuthenticatedUser

boundary "AddEventView" as AddEventView << TSX >>

control "useDeviceFeatures" as useDeviceFeatures << Custom Hooks >>
control "DeviceFeatures" as NativeFeatures << Component >>
control "SupabaseClient" as SupabaseClient

control "AddEventController" as AddEventController << TS >>
control "LocationController" as LocationController << TS >>
control "FileController" as FileController << TS >>

entity "EventModel" as EventModel << TS >>
entity "LocationModel" as LocationModel << TS >>

participant "Express API" as API << REST >>
participant "Prisma Client" as prisma << ORM >>

database "postgresql" as postgresql << Supabase >>
database "FileStorage" as supabase << Supabase >>

activate AddEventView

alt Take Picture
    AuthenticatedUser -> AddEventView : openCamera()
    AddEventView -> useDeviceFeatures : openCamera()
    activate useDeviceFeatures
    useDeviceFeatures -> NativeFeatures : launchCamera()
    activate NativeFeatures
    NativeFeatures -> useDeviceFeatures : result.assets[0].uri
    deactivate NativeFeatures
    useDeviceFeatures -> AddEventView : imageUri
    deactivate useDeviceFeatures
else Pick Image
    AuthenticatedUser -> AddEventView : openGallery()
    AddEventView -> useDeviceFeatures : openGallery()
    activate useDeviceFeatures
    useDeviceFeatures -> NativeFeatures : launchImageLibrary()
    activate NativeFeatures
    NativeFeatures -> useDeviceFeatures : result.assets[0].uri
    deactivate NativeFeatures
    useDeviceFeatures -> AddEventView : imageUri
    deactivate useDeviceFeatures
end

AuthenticatedUser -> AddEventView : setTitle()
AuthenticatedUser -> AddEventView : setDescription()
AuthenticatedUser -> AddEventView : setDate()
AuthenticatedUser -> AddEventView : setStartsAt()
AuthenticatedUser -> AddEventView : setEndsAt()
AuthenticatedUser -> AddEventView : setCategory()

alt Pick Music File
    AuthenticatedUser -> AddEventView : pickMusicFile()
    AddEventView -> useDeviceFeatures : pickMusicFile()
    activate useDeviceFeatures
    useDeviceFeatures -> NativeFeatures : pickFile("audio/*")
    activate NativeFeatures
    NativeFeatures -> useDeviceFeatures : result.assets[0].uri
    deactivate NativeFeatures
    useDeviceFeatures -> AddEventView : musicFileUri
    deactivate useDeviceFeatures
else Record Audio
    AuthenticatedUser -> AddEventView : startRecording()
    AddEventView -> useDeviceFeatures : recordAudio()
    activate useDeviceFeatures
    useDeviceFeatures -> NativeFeatures : startRecording()
    activate NativeFeatures
    NativeFeatures -> useDeviceFeatures : recording
    deactivate NativeFeatures
    AuthenticatedUser -> AddEventView : stopRecording()
    AddEventView -> useDeviceFeatures : stopRecording()
    useDeviceFeatures -> NativeFeatures : stopRecording()
    activate NativeFeatures
    NativeFeatures -> useDeviceFeatures : audioFileUri
    deactivate NativeFeatures
    useDeviceFeatures -> AddEventView : audioFileUri
    deactivate useDeviceFeatures
end

AuthenticatedUser -> AddEventView : handleCurrentLocation()
AddEventView -> useDeviceFeatures : getCurrentLocation()
activate useDeviceFeatures
useDeviceFeatures -> NativeFeatures : getCurrentPosition()
activate NativeFeatures
NativeFeatures -> useDeviceFeatures : currentLocation
deactivate NativeFeatures
useDeviceFeatures -> AddEventView : location
deactivate useDeviceFeatures

AuthenticatedUser -> AddEventView : handleAddEvent()

AddEventView -> FileController : uploadFile(imageUri, FileType.IMAGE)
activate FileController
FileController -> SupabaseClient : storage.from(EventImages).upload(imageUri)
activate SupabaseClient
SupabaseClient -> supabase : storage.from(EventImages).getPublicUrl(imageUri)
activate supabase
supabase -> SupabaseClient : publicImageUrl
deactivate supabase
SupabaseClient -> FileController : publicImageUrl
deactivate SupabaseClient
FileController -> AddEventView : imageUrl
deactivate FileController

AddEventView -> FileController : uploadFile(musicFileUri, FileType.MUSIC)
activate FileController
FileController -> SupabaseClient : storage.from(EventMusic).upload(musicFileUri)
activate SupabaseClient
SupabaseClient -> supabase : storage.from(EventMusic).getPublicUrl(musicFileUri)
activate supabase
supabase -> SupabaseClient : publicMusicUrl
deactivate supabase
SupabaseClient -> FileController : publicMusicUrl
deactivate SupabaseClient
FileController -> AddEventView : musicUrl
deactivate FileController


' Location 
AddEventView -> LocationController : addLocation(location)
activate LocationController
LocationController -> LocationModel : createLocation(location)
activate LocationModel

LocationModel -> API : POST /api/locations
activate API
API -> prisma : location.create()
activate prisma
prisma -> postgresql : INSERT INTO locations
activate postgresql

alt Successful case
    postgresql -> prisma : locationId
    prisma -> API : location
    API -> LocationModel : {location, true}
    LocationModel -> LocationController : locationId
    LocationController -> AddEventView : locationId
else Failed case
    postgresql -> prisma : error
    deactivate postgresql
    prisma -> API : error
    deactivate prisma
    API -> LocationModel : status(500)
    deactivate API
    LocationModel -> LocationController : error
    deactivate LocationModel
    LocationController -> AddEventView : error
    deactivate LocationController
    AddEventView -> AuthenticatedUser : Show error message
end


' Event
AddEventView -> AddEventController : postEvent(event)
activate AddEventController

AddEventController -> EventModel : createEvent(event)
activate EventModel

EventModel -> API : POST /api/events
activate API
API -> prisma : event.create()
activate prisma
prisma -> postgresql : INSERT INTO events
activate postgresql

alt Successful case
    postgresql -> prisma : event

    prisma -> API : event

    API -> EventModel : {event, true}

    EventModel -> AddEventController : event

    AddEventController -> AddEventView : event

    AddEventView -> AuthenticatedUser : Show success message
else Failed case
    postgresql -> prisma : error
    deactivate postgresql
    prisma -> API : error
    deactivate prisma
    API -> EventModel : status(500)
    deactivate API
    EventModel -> AddEventController : error
    deactivate EventModel
    AddEventController -> AddEventView : error
    deactivate AddEventController
    AddEventView -> AuthenticatedUser : Show error message
end
deactivate AddEventView

@enduml







