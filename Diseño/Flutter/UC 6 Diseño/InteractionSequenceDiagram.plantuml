@startuml
skinparam style strictuml
skinparam defaultFontSize 11
skinparam stereotypePosition top

actor "Authenticated\nUser" as AuthenticatedUser

boundary "AddEventView" as AddEventView << Dart >>


control "AddEventViewModel" as AddEventViewModel << Dart >>
control "EventRepository" as EventRepository << Dart >>
control "LocationRepository" as LocationRepository << Dart >>
control "StorageService" as StorageService << Dart >>
control "ApiClient" as ApiClient << Dart >>
control "SupabaseClient" as SupabaseClient

control "image_picker" as imagePicker << Class >>
control "FilePicker" as FilePicker << Class >>
control "FlutterSoundRecorder" as FlutterSoundRecorder << Class >>
control "Location" as Location << Class >>

entity "EventModel" as EventModel << Dart >>
entity "LocationModel" as LocationModel << Dart >>

participant "Express API" as API << REST >>
participant "Prisma Client" as prisma << ORM >>
database postgresql
database supabase


alt Take Picture
    AuthenticatedUser -> AddEventView : takePhoto()
    activate AddEventView
    AddEventView -> imagePicker : pickImage(source: ImageSource.camera)
    activate imagePicker
    imagePicker -> AddEventView : _imageUri
    deactivate imagePicker
else Pick Image
    AuthenticatedUser -> AddEventView : chooseFromGallery()
    AddEventView -> imagePicker : pickImage(source: ImageSource.gallery)
    activate imagePicker
    imagePicker -> AddEventView : _imageUri
    deactivate imagePicker
end

AuthenticatedUser -> AddEventView : setState(_title)
AuthenticatedUser -> AddEventView : setState(_description)
AuthenticatedUser -> AddEventView : setState(_date)
AuthenticatedUser -> AddEventView : setState(_startsAt)
AuthenticatedUser -> AddEventView : setState(_endsAt)
AuthenticatedUser -> AddEventView : setState(_category)

alt Pick Music File
    AuthenticatedUser -> AddEventView : pickMusic()
    AddEventView -> FilePicker : pickFile()
    activate FilePicker
    FilePicker -> AddEventView : _musicUri
    deactivate FilePicker
else Record Audio
    AuthenticatedUser -> AddEventView : startRecording()
    AddEventView -> FlutterSoundRecorder : openRecorder()
    activate FlutterSoundRecorder
    AuthenticatedUser -> AddEventView : stopRecording()
    AddEventView -> FlutterSoundRecorder : stopRecorder()
    FlutterSoundRecorder -> AddEventView : _musicUri
    deactivate FlutterSoundRecorder
end

AuthenticatedUser -> AddEventView : location
AddEventView -> Location : getLocation()
activate Location
Location -> AddEventView : location
deactivate Location

AuthenticatedUser -> AddEventView : handlePublish()

AddEventView -> AddEventViewModel : createEvent()
activate AddEventViewModel
AddEventViewModel -> StorageService : uploadFile(imageUri)
activate StorageService
StorageService -> SupabaseClient : storage.from(EventImages).upload(imageUri)
activate SupabaseClient
SupabaseClient -> supabase : storage.from(EventImages).upload(imageUri)
activate supabase
supabase -> SupabaseClient : publicImageUrl
deactivate supabase

SupabaseClient -> StorageService : publicImageUrl
deactivate SupabaseClient
StorageService -> AddEventViewModel : publicImageUrl
deactivate StorageService

AddEventViewModel -> StorageService : uploadFile(musicUri)
activate StorageService
StorageService -> SupabaseClient : storage.from(EventMusic).upload(musicUri)
activate SupabaseClient

SupabaseClient -> supabase : storage.from(EventMusic).upload(musicUri)
activate supabase
supabase -> SupabaseClient : publicMusicUrl
deactivate supabase

SupabaseClient -> StorageService : publicMusicUrl
deactivate SupabaseClient
StorageService -> AddEventViewModel : publicMusicUrl
deactivate StorageService

AddEventViewModel -> LocationRepository : createLocation()
activate LocationRepository
LocationRepository -> ApiClient : createLocation()

activate ApiClient

ApiClient -> API : POST /api/locations
activate API
API -> prisma : location.create()
activate prisma
prisma -> postgresql : INSERT INTO locations
activate postgresql

alt Successful case
    postgresql -> prisma : locationId
    prisma -> API : location
    API -> ApiClient : {data: location, success: true}
    ApiClient -> LocationModel : fromJson(location)
    activate LocationModel
    LocationModel -> LocationRepository : location
    LocationRepository -> AddEventViewModel : location
else Failed case
    postgresql -> prisma : error
    deactivate postgresql
    prisma -> API : error
    deactivate prisma
    API -> ApiClient : status(500) {error: "FAILED to create location"}
    deactivate API
    ApiClient -> LocationModel : error
    deactivate ApiClient
    LocationModel -> LocationRepository : error
    deactivate LocationModel
    LocationRepository -> AddEventViewModel : error
    deactivate LocationRepository
    AddEventViewModel -> AddEventView : error
    AddEventView -> AuthenticatedUser : showErrorMessage()
end

AddEventViewModel -> EventRepository : createEvent()
activate EventRepository
EventRepository -> ApiClient : createEvent()
activate ApiClient
ApiClient -> API : POST /api/events
activate API
API -> prisma : event.create()
activate prisma
prisma -> postgresql : INSERT INTO events
activate postgresql

alt Successful case
    postgresql -> prisma : eventId
    prisma -> API : event
    API -> ApiClient : {data: event, success: true}
    ApiClient -> EventModel : fromJson(event)
    activate EventModel
    EventModel -> EventRepository : event
    EventRepository -> AddEventViewModel : event
    AddEventViewModel -> AddEventView : event
    AddEventView -> AuthenticatedUser : showSuccessMessage()
else Failed case
    postgresql -> prisma : error
    deactivate postgresql
    prisma -> API : error
    deactivate prisma
    API -> ApiClient : status(500) {error: "FAILED to create event"}
    deactivate API
    ApiClient -> EventModel : error
    deactivate ApiClient
    EventModel -> EventRepository : error
    deactivate EventModel
    EventRepository -> AddEventViewModel : error
    deactivate EventRepository
    AddEventViewModel -> AddEventView : error
    deactivate AddEventViewModel
    AddEventView -> AuthenticatedUser : showErrorMessage()
end
deactivate AddEventView
@enduml







