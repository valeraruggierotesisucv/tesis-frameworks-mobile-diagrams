@startuml
skinparam style strictuml
skinparam defaultFontSize 11
skinparam stereotypePosition top

actor "Authenticated\nUser" as AuthenticatedUser

boundary "AddEventView" as AddEventView << dart >>


control "AddEventViewModel" as AddEventController << dart >>
control "EventRepository" as EventRepository << dart >>
control "LocationRepository" as LocationRepository << dart >>
control "StorageService" as StorageService << dart >>
control "ApiClient" as ApiClient << dart >>
control "SupabaseClient" as SupabaseClient << dart >>

control "image_picker" as imagePicker << class >>
control "FilePicker" as FilePicker << class >>
control "FlutterSoundRecorder" as FlutterSoundRecorder << class >>
control "Location" as Location << class >>

entity "EventModel" as EventModel
entity "LocationModel" as LocationModel

participant "Express API" as API << REST >>
participant "Prisma Client" as prisma << ORM >>
database postgresql


AuthenticatedUser -> AddEventView : image

alt Pick Image
activate AddEventView
AddEventView -> imagePicker : pickImage()
activate imagePicker
imagePicker -> AddEventView : imageUri
deactivate imagePicker

AuthenticatedUser -> AddEventView : title
AuthenticatedUser -> AddEventView : description
AuthenticatedUser -> AddEventView : date
AuthenticatedUser -> AddEventView : startsAt
AuthenticatedUser -> AddEventView : endsAt
AuthenticatedUser -> AddEventView : category
AuthenticatedUser -> AddEventView : music


AuthenticatedUser -> AddEventView : music
alt Pick Music File
    AddEventView -> FilePicker : pickFile()
    activate FilePicker
    FilePicker -> AddEventView : musicUri
    deactivate FilePicker
else Record Audio
    AddEventView -> FlutterSoundRecorder : openRecorder()
    activate FlutterSoundRecorder
    FlutterSoundRecorder -> AddEventView : musicUri
    deactivate FlutterSoundRecorder
end

AuthenticatedUser -> AddEventView : location
AddEventView -> Location : getLocation()
activate Location
Location -> AddEventView : location
deactivate Location

AuthenticatedUser -> AddEventView : handlePublish()

AddEventView -> AddEventViewModel : createEvent()
activate AddEventViewModel
AddEventViewModel -> StorageService : uploadFile(imageUri)
activate StorageService
StorageService -> SupabaseClient : storage.from(EventImages).upload(imageUri)
activate SupabaseClient
SupabaseClient -> StorageService : publicImageUrl
deactivate SupabaseClient
StorageService -> AddEventViewModel : publicImageUrl
deactivate StorageService

AddEventViewModel -> StorageService : uploadFile(musicUri)
activate StorageService
StorageService -> SupabaseClient : storage.from(EventMusic).upload(musicUri)
activate SupabaseClient
SupabaseClient -> StorageService : publicMusicUrl
deactivate SupabaseClient
StorageService -> AddEventViewModel : publicMusicUrl
deactivate StorageService

AddEventViewModel -> LocationRepository : createLocation()
activate LocationRepository
LocationRepository -> ApiClient : createLocation()

activate ApiClient

ApiClient -> API : POST /api/locations
activate API
API -> prisma : location.create()
activate prisma
prisma -> postgresql : INSERT INTO locations
activate postgresql
postgresql -> prisma : locationId
deactivate postgresql
prisma -> API : location
deactivate prisma
API -> ApiClient : {data: location, success: true}
deactivate API
ApiClient -> LocationModel
deactivate ApiClient
activate LocationModel

LocationModel -> LocationRepository : location
LocationRepository -> AddEventViewModel : location
deactivate LocationModel
deactivate LocationRepository

AddEventViewModel -> EventRepository : createEvent()
activate EventRepository
EventRepository -> ApiClient : createEvent()
activate ApiClient
ApiClient -> API : POST /api/events
activate API
API -> prisma : event.create()
activate prisma
prisma -> postgresql : INSERT INTO events
activate postgresql

alt Successful case
    postgresql -> prisma : eventId
    prisma -> API : event
    API -> ApiClient : {data: event, success: true}
    
    ApiClient -> EventModel : event
    deactivate ApiClient
    activate EventModel
    EventModel -> EventRepository : event
    deactivate EventModel
    EventRepository -> AddEventViewModel : event
    deactivate EventRepository
    AddEventViewModel -> AddEventView : event
    deactivate AddEventViewModel
    AddEventView -> AuthenticatedUser : showSuccessMessage()
else Failed case
    postgresql -> prisma : error
    deactivate postgresql
    prisma -> API : error
    deactivate prisma
    API -> ApiClient : status(500) {error: "FAILED to create event"}
    deactivate API
    ApiClient -> EventModel : error
    activate EventModel
    EventModel -> EventRepository : error
    deactivate EventModel
    EventRepository -> AddEventViewModel : error
    AddEventViewModel -> AddEventView : error
    AddEventView -> AuthenticatedUser : showErrorMessage()
end
deactivate AddEventView
@enduml







